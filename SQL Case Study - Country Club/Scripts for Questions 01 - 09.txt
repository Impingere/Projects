In this case study, you'll be asked a series of questions. You can
solve them using the platform, but for the final deliverable,
paste the code for each solution into this script, and upload it
to your GitHub.

Before starting with the questions, feel free to take your time,
exploring the data, and getting acquainted with the 3 tables. */


/* QUESTIONS 
/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */
/* A1: 5 facilities */
SELECT *
FROM Facilities
WHERE membercost > 0
ORDER BY facid;


/* Q2: How many facilities do not charge a fee to members? */
/* A2: 4 facilities */
SELECT *
FROM Facilities
WHERE membercost = 0
ORDER BY facid;


/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */
/* A3: 5 records that meet this criteria  */
SELECT facid, name, membercost, monthlymaintenance
FROM Facilities
WHERE membercost > 0 
      AND membercost < (monthlymaintenance * .2)
ORDER BY facid;


/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. */
/* A4: returned records 1 & 5 */
SELECT *
FROM Facilities
WHERE facid < 6 
      AND facid NOT IN (0,2,3,4)
ORDER BY facid;


/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */
/* A5: 4 facility records are 'expensive' */
SELECT name AS Facility_Name,
       CASE 
           WHEN monthlymaintenance < 100 THEN 'cheap'
           ELSE 'expensive'
       END AS Maintenance
FROM Facilities
ORDER BY facid;


/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */
/* A6: 10 members have joined since September 2012 */
SELECT *
FROM Members
WHERE (EXTRACT(YEAR FROM joindate) > 2011
      AND EXTRACT(MONTH FROM joindate) > 08)
      AND surname != 'GUEST'
ORDER BY joindate DESC;


/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */
/* A7: results are a list of concatonated names that used the tennis courts */
SELECT CONCAT_WS(' ', m.firstname, m.surname) AS Tennis_Members
FROM Members AS m
JOIN Bookings AS b
ON m.memid = b.memid
JOIN Facilities AS f
ON b.facid = f.facid
WHERE f.name LIKE '%Tennis Court%' 
      AND m.firstname NOT LIKE '%GUEST%'
GROUP BY Tennis_Members
ORDER BY Tennis_Members;


/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */
/* A8: This query produces 11 records with only 1 member on it. */
SELECT f.name AS Facility_Name, 
       CASE 
           WHEN m.firstname = 'GUEST' THEN 'Guest'
           ELSE CONCAT_WS(' ', m.firstname, m.surname) 
           END AS Name,
       CASE 
           WHEN m.memid != 0 THEN f.membercost * b.slots
           ELSE f.guestcost * b.slots
           END AS Cost
FROM Bookings AS b
JOIN Facilities AS f
ON b.facid = f.facid
JOIN Members AS m
ON m.memid = b.memid
WHERE EXTRACT(YEAR FROM starttime) = 2012 
      AND EXTRACT(MONTH FROM starttime) = 09 
      AND EXTRACT(DAY FROM starttime) = 14
      AND ((m.memid != 0 AND f.membercost * b.slots > 30) OR
           (m.memid = 0 AND f.guestcost * b.slots > 30))
ORDER BY Cost DESC;


/* Q9: This time, produce the same result as in Q8, but using a subquery. */
/* A9: This loops through calculating cost first before joining */
SELECT f.name AS Facility_Name, 
       CASE 
           WHEN m.firstname = 'GUEST' THEN 'Guest'
           ELSE CONCAT_WS(' ', m.firstname, m.surname) 
       END AS Member_Name,
       Cost.Total
FROM (
    SELECT b.memid, b.facid, 
           CASE 
               WHEN m.memid != 0 THEN f.membercost * b.slots
               ELSE f.guestcost * b.slots
           END AS Total
    FROM Bookings b
    JOIN Members m ON m.memid = b.memid
    JOIN Facilities f ON b.facid = f.facid
    WHERE EXTRACT(YEAR FROM starttime) = 2012 
          AND EXTRACT(MONTH FROM starttime) = 9 
          AND EXTRACT(DAY FROM starttime) = 14
          AND ((m.memid != 0 AND f.membercost * b.slots > 30) OR
               (m.memid = 0 AND f.guestcost * b.slots > 30))
) AS Cost
JOIN Facilities f ON Cost.facid = f.facid
JOIN Members m ON m.memid = Cost.memid
ORDER BY Cost.Total DESC;





Tables(columns)
Facilities(facid, monthlymaintenance, name, membercost, guestcost, initialoutlay)
Bookings(bookid, facid, memid, starttime, slots)
Members(memid, surname, firstname, address, zipcode, joindate, telephone, recommendedby)